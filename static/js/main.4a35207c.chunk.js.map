{"version":3,"sources":["components/Input.js","components/Form.js","components/Company.js","components/Companies.js","components/Main.js","components/Nav.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","handleChange","name","placeholder","title","type","value","htmlFor","id","Form","state","industry","open","close","notes","handleSubmit","bind","this","company","setState","event","target","preventDefault","className","onSubmit","step","Component","Company","formVisible","toggleForm","handleUpdate","handleDelete","onClick","Companies","companies","map","key","Main","Nav","href","Footer","App","formInputs","handleAdd","console","log","fetch","body","JSON","stringify","method","headers","then","createdCompany","json","jsonCompany","catch","err","updatedCompany","getCompanies","deletedCompany","filter","index","res","jData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a35207c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Input = props => {\n  const {handleChange, name, placeholder, title, type, value} = props\n  return(\n    <>\n      <label htmlFor={name}>{title}</label>\n      <input type={type}\n        id={name}\n        name={name}\n        type={type}\n        value={value}\n        onChange={handleChange}\n        placeholder={placeholder}\n      />\n    </>\n  )\n}\n\nexport default Input\n","import React, {Component} from 'react'\nimport Input from './Input'\n\n\nclass Form extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      name: '',\n      industry: '',\n      open: 0,\n      close: 0,\n      notes: '',\n    }\n  this.handleSubmit = this.handleSubmit.bind(this)\n  this.handleChange = this.handleChange.bind(this)\n  }\n  componentWillMount(){\n    if (this.props.company) {\n      this.setState({\n        name: this.props.company.name || '',\n        industry: this.props.company.industry || '',\n        open: this.props.company.open || '',\n        close: this.props.company.close || '',\n        notes: this.props.company.notes || '',\n        id: this.props.company.id || ''\n      })\n    }\n  }\n  handleChange (event){\n    this.setState(\n      {[event.target.id]:event.target.value}\n    )\n  }\n  handleSubmit(event){\n    event.preventDefault()\n    const company = {\n      name: this.state.name,\n      industry: this.state.industry,\n      open: this.state.open,\n      close: this.state.close,\n      notes: this.state.notes\n    }\n    if(this.props.company) company.id =\n    this.props.company.id\n    this.props.handleSubmit(\n      event,\n      company\n    )\n  }\n  render(){\n    return(\n      <form className=\"company\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"name\">Company Name: </label>\n        <Input type={'text'}\n          id={'name'}\n          name={'name'}\n          placeholder={'Company Name'}\n          handleChange={this.handleChange}\n          value={this.state.name}\n        />\n        <label htmlFor=\"industry\">Industry: </label>\n        <Input type={'text'}\n          id={'industry'}\n          name={'industry'}\n          placeholder={'Company Industry'}\n          handleChange={this.handleChange}\n          value={this.state.industry}\n        />\n        <label htmlFor=\"open\">Open price</label>\n        <Input type={'number'}\n          step=\"0.01\"\n          id={'open'}\n          name={'open'}\n          placeholder={'Company Open'}\n          handleChange={this.handleChange}\n          value={this.state.open}\n        />\n        <label htmlFor=\"close\">Close price</label>\n        <Input type={'number'}\n          step=\"0.01\"\n          id={'close'}\n          name={'close'}\n          placeholder={'Company Close'}\n          handleChange={this.handleChange}\n          value={this.state.close}\n        />\n        <label htmlFor=\"notes\">Notes:</label>\n        <Input type={'text'}\n          id={'notes'}\n          name={'notes'}\n          placeholder={'Company Notes'}\n          handleChange={this.handleChange}\n          value={this.state.notes}\n        />\n        <input type='submit' value={this.props.company ? \"Update company info\" :\"Add a New Company\"}/>\n      </form>\n    )\n  }\n}\n\nexport default Form\n","import React, {Component} from 'react'\nimport Form from './Form'\n\nclass Company extends Component {\n  state = {\n    formVisible: false\n  }\n  toggleForm = () => {\n    this.setState({formVisible: !this.state.formVisible})\n  }\n  handleUpdate = (event, company) => {\n    this.props.handleUpdate(event, company)\n    this.toggleForm()\n  }\n  render(){\n    const {company, handleDelete, handleUpdate} = this.props\n    return(\n      <>\n        {\n          this.state.formVisible ?\n          <Form\n            company={company}\n            handleSubmit={this.handleUpdate}\n            toggleForm={this.toggleForm}\n          /> :\n          <div className=\"company\">\n            <h3>{company.name}</h3>\n            <h4>{company.industry}</h4>\n            <h5>Open price: ${company.open}</h5>\n            <h5>Close price: ${company.close}</h5>\n            <p>Notes: {company.notes}</p>\n            <button onClick={() =>\n            handleDelete(company)}>DELETE</button>\n            <button onClick={this.toggleForm}>EDIT</button>\n          </div>\n        }\n      </>\n    )\n  }\n}\n\nexport default Company\n","import React, {Component} from 'react'\nimport Company from './Company'\n\nfunction Companies(props) {\n  const {companies, handleDelete, handleUpdate} = props\n  return(\n    <div>\n      {companies.map(company => <Company key={company.id}\n      company={company} handleDelete={handleDelete} handleUpdate={handleUpdate}\n       />)}\n    </div>\n  )\n}\nexport default Companies;\n","import React from 'react'\nimport Companies from './Companies'\n\nfunction Main(props) {\n  const {companies, handleDelete, handleUpdate} = props\n  return(\n    <div className='main'>\n      <Companies\n        companies={companies}\n        handleDelete={handleDelete}\n        handleUpdate={handleUpdate}\n       />\n    </div>\n  )\n}\n\nexport default Main\n","import React, {Component} from 'react'\n\nclass Nav extends Component{\n  render(){\n    return(\n      <nav>\n        <ul>\n  <li><a href=\"#\">Login</a></li>\n  <li><a href=\"\">BizTrk</a></li>\n  <li><a href=\"#\">News</a></li>\n    </ul>\n      </nav>\n    )\n  }\n}\nexport default Nav\n","import React from 'react'\nimport Form from './Form'\n\nfunction Footer(props){\n  return(\n    <footer>\n    <Form handleSubmit={props.handleSubmit} />\n    </footer>\n  )\n}\nexport default Footer\n","import React, {Component} from 'react'\nimport Main from './components/Main'\nimport Nav from './components/Nav'\nimport Footer from './components/Footer'\nimport './css/normalize.css'\nimport './css/skeleton.css'\nimport './App.css'\n\n\nclass App extends Component{\n  state = {\n    companies: [],\n    formInputs: {\n      name: '',\n      industry: '',\n      open: 0,\n      close: 0,\n      notes: '',\n    }\n  }\n  componentDidMount(){\n    this.getCompanies()\n  }\n\n  getCompanies(){\n    fetch(\"http://localhost:3000/companies\")\n    .then(res => res.json())\n    .then(jData => this.setState({companies: jData}))\n    .catch(err => console.log(err))\n  }\n  handleAdd = (event, formInputs) => {\n    event.preventDefault()\n    console.log(formInputs)\n    fetch('https://biztrk.herokuapp.com/companies', {\n      body: JSON.stringify(formInputs),\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(createdCompany => createdCompany.json())\n    .then(jsonCompany => {\n      this.setState({\n        companies: [jsonCompany, ...this.state.companies]\n      })\n    })\n    .catch(err => console.log(err))\n  }\n  handleUpdate = (event, formInputs) => {\n    event.preventDefault()\n    fetch(`https://biztrk.herokuapp.com/companies/${formInputs.id}`, {\n      body: JSON.stringify(formInputs),\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n       'Content-Type': 'application/json'\n      }\n    })\n    .then(updatedCompany => {\n      this.getCompanies()\n    })\n    .catch(err => console.log(err))\n  }\n  handleDelete = (deletedCompany) => {\n    fetch(`https://biztrk.herokuapp.com/companies/${deletedCompany.id}`,{\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(() => {\n      const companies = this.state.companies.filter((company, index) => company.id !==deletedCompany.id)\n      this.setState({companies})\n    })\n    .catch(err => console.log(err))\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <Nav />\n      <div className=\"container\">\n        <Main\n          companies={this.state.companies}\n          handleDelete={this.handleDelete}\n          handleUpdate={this.handleUpdate}\n         />\n      </div>\n      <Footer handleSubmit={this.handleAdd} />\n    </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}